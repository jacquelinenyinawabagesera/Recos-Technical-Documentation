{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Recos is an intelligent recruitment platform that integrates seamlessly with Odoo and Google Calendar\u2014powered by advanced AI for interviews, reporting, and hiring analytics."},{"location":"#why-choose-recos","title":"Why Choose Recos?","text":"<ul> <li>Next-Gen AI: Automated candidate assessment, interview question generation, and detailed analytics.</li> <li>Odoo Integration: Instantly connect, sync jobs/candidates, and manage all recruitment data in one place.</li> <li>Google Calendar/Meet: Effortless interview scheduling with automatic Meet link generation.</li> <li>Real-Time Transcription: AssemblyAI integration for live interview transcription and Gemini analytics.</li> <li>Tech Stack: Next.js, Tailwind CSS, TypeScript, Django REST. Deployed with Vercel CI/CD.</li> <li>API-First: All features accessible via tested REST APIs (see API Reference).</li> </ul>"},{"location":"#platform-at-a-glance","title":"Platform at a Glance","text":"<p>For more about the Recos vision, see our Informational Website. Ready to get started? Jump to the next section!</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Welcome to the Recos API Reference. You will find everything you need to integrate with, test, and explore the API endpoints that power the Recos platform.</p>"},{"location":"api-reference/#live-api-docs","title":"Live API Docs","text":"<ul> <li>Postman Online Docs: View Postman Documentation</li> <li>Swagger UI:</li> </ul>"},{"location":"api-reference/#api-documentation-screenshots","title":"API Documentation Screenshots","text":"Swagger UI Example Postman API Docs Example"},{"location":"api-reference/#main-endpoints","title":"Main Endpoints","text":"<p>Below are the core API endpoints available in Recos. All endpoints follow REST conventions and require authentication.</p>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<pre>\nPOST   /register/           # Recruiter registration\nPOST   /login/              # Login\nPOST   /logout/             # Logout\n</pre>"},{"location":"api-reference/#password-management","title":"Password Management","text":"<pre>\nPOST   /forgot-password/          # Start password reset\nPOST   /reset-password/           # Complete password reset\nPOST   /verify-reset-code/        # Verify reset code sent to email\n</pre>"},{"location":"api-reference/#recruiter-profile","title":"Recruiter &amp; Profile","text":"<pre>\nGET    /users/                    # List all recruiters\nPUT    /update-profile/           # Update your profile\nDELETE /delete-account/           # Delete your account\n</pre>"},{"location":"api-reference/#odoo-integration","title":"Odoo Integration","text":"<pre>\nPOST   /verify-odoo/              # Verify Odoo account\nPOST   /odoo-credentials/         # Add Odoo credentials\nGET    /odoo-credentials/list/    # List Odoo credentials\nGET    /companies/                # List companies\nGET    /companies/&lt;company_id&gt;/jobs/    # Get jobs by company\n</pre>"},{"location":"api-reference/#jobs-candidates","title":"Jobs &amp; Candidates","text":"<pre>\nGET    /jobs/                     # List all jobs\nGET    /jobs/&lt;job_id&gt;/candidates/ # Get candidates for a specific job\nGET    /candidates/               # List all candidates\nGET    /candidates/&lt;candidate_id&gt;/attachments/   # Candidate attachments\nGET    /candidates/&lt;candidate_id&gt;/attachments/download/&lt;attachment_id&gt;/   # Download attachment\n</pre>"},{"location":"api-reference/#sync-operations-odoo-data","title":"Sync Operations (Odoo Data)","text":"<pre>\nPOST   /sync/jobs/company/&lt;company_id&gt;/          # Sync jobs for a company\nPOST   /sync/jobs/handle-duplicates/             # Sync jobs &amp; handle duplicates\nPOST   /sync/jobs/user/                          # Sync jobs for logged-in user\nPOST   /sync/candidates/job/&lt;job_id&gt;/            # Sync candidates for a job\nPOST   /sync/candidates/company/&lt;company_id&gt;/    # Sync candidates by company\nPOST   /sync/candidates/all/                     # Sync all candidates\nPOST   /sync/candidates/&lt;candidate_id&gt;/attachments/   # Sync candidate attachments\n</pre>"},{"location":"api-reference/#interview-management","title":"Interview Management","text":"<pre>\nPOST   /interviews/create/                                   # Create interview\nPOST   /interviews/&lt;interview_id&gt;/create-calendar-event/     # Add interview to Google Calendar\nGET    /interviews/&lt;interview_id&gt;/analytics/                 # Get interview analytics (AI/Gemini)\n</pre>"},{"location":"api-reference/#ai-reports-conversations","title":"AI Reports &amp; Conversations","text":"<pre>\nGET    /interview_conversations/     # List all interview conversations\nGET    /ai-reports/                  # List all AI reports\n</pre>"},{"location":"api-reference/#google-calendar-oauth","title":"Google Calendar &amp; OAuth","text":"<pre>\nGET    /auth/google/initiate/    # Start Google OAuth\nGET    /auth/google/callback/    # Google OAuth callback\nGET    /api/auth/google/callback/# API-level OAuth callback\n</pre>"},{"location":"api-reference/#example-api-usage","title":"Example API Usage","text":""},{"location":"api-reference/#odoo-integration_1","title":"Odoo Integration","text":"<ul> <li>Verify Odoo Account:</li> </ul> <pre>\nPOST /verify-odoo/\n{\n  \"instance_url\": \"https://your-odoo.com\",\n  \"email\": \"you@example.com\",\n  \"api_key\": \"...\"\n}\n</pre> <ul> <li>Fetch Jobs from Odoo:</li> </ul> <pre>\nGET /odoo/jobs\n</pre> <ul> <li>Fetch Candidates from Odoo:</li> </ul> <pre>\nGET /odoo/candidates\n</pre>"},{"location":"api-reference/#google-calendar-meet-integration","title":"Google Calendar / Meet Integration","text":"<ul> <li>Schedule Interview Event:</li> </ul> <pre>\nPOST /interviews/{interview_id}/create-calendar-event/\n</pre> <ul> <li>Create Google Calendar Event:</li> </ul> <pre>\nPOST /calendar/events\n</pre> <ul> <li>Get All Google Meet Links:</li> </ul> <pre>\nGET /calendar/meets\n</pre>"},{"location":"api-reference/#ai-assemblyai-and-gemini","title":"AI, AssemblyAI, and Gemini","text":"<ul> <li>Start Interview with AI Assistant (transcription):</li> </ul> <pre>\nPOST /interviews/create/\n</pre> <ul> <li>Get Post-Interview Analytics:</li> </ul> <pre>\nGET /interviews/{interview_id}/analytics/\n</pre>"},{"location":"api-reference/#attachments","title":"Attachments","text":"<ul> <li>Get Candidate Attachments:</li> </ul> <pre>\nGET /candidates/{candidate_id}/attachments/\n</pre> <ul> <li>Download Attachment:</li> </ul> <pre>\nGET /candidates/{candidate_id}/attachments/download/{attachment_id}/\n</pre>"},{"location":"api-reference/#api-testing-documentation","title":"API Testing &amp; Documentation","text":"<ul> <li>All APIs are tested in Postman.</li> <li>See Postman Docs.</li> <li>See screenshots above for Swagger UI and Postman documentation examples.</li> </ul>"},{"location":"api-reference/#security-authentication","title":"Security &amp; Authentication","text":"<ul> <li>Endpoints require authentication via JWT or session.</li> <li>Store API keys and secrets in environment variables (<code>.env</code>), never commit secrets to your repository.</li> </ul>"},{"location":"api-reference/#more-information","title":"More Information","text":"<ul> <li>For a full list of all endpoints and models, see the Developer Docs.</li> <li>For architecture and integration details, see Developer Docs and Integrations.</li> </ul>"},{"location":"code-standards/","title":"Code Standards","text":""},{"location":"code-standards/#frontend-nextjs-typescript-tailwind","title":"Frontend (Next.js, TypeScript, Tailwind)","text":"<ul> <li>Components: Always use functional components for consistency and performance.</li> <li>Naming:</li> <li>camelCase for variables and functions</li> <li>PascalCase for component names</li> <li>SCREAMING_SNAKE_CASE for constants</li> <li>Files: One component per file. Group files by feature/module for maintainability.</li> <li>Testing: Use Jest and React Testing Library for unit tests; add tests for each new component or logic.</li> <li>Styling: Tailwind CSS for all styling. Avoid inline styles unless absolutely necessary.</li> </ul>"},{"location":"code-standards/#backend-django-drf","title":"Backend (Django, DRF)","text":"<ul> <li>Naming:</li> <li>snake_case for variables and functions</li> <li>PascalCase for classes and models</li> <li>Serializers/Views: Place each in its own file unless they are closely related.</li> <li>Testing: Use Django\u2019s built-in test runner (<code>python manage.py test</code>) and maintain high coverage.</li> </ul>"},{"location":"code-standards/#general-standards","title":"General Standards","text":"<ul> <li>Linting:</li> <li>Prettier + ESLint for frontend code</li> <li>flake8 and black for backend code</li> <li>Pull Requests: </li> <li>Write clear summaries for every PR</li> <li>Link related issues (use <code>Fixes #issue_num</code>)</li> <li>Always request at least one review before merging</li> <li>Documentation: </li> <li>Document components, functions, and modules with JSDoc (frontend) or docstrings (backend)</li> <li>Update README and feature docs for significant changes</li> </ul>"},{"location":"code-standards/#best-practices","title":"Best Practices","text":"<ul> <li>Keep functions and components small and focused.</li> <li>Prefer composition over inheritance.</li> <li>Avoid commented-out code in committed files.</li> <li>Refactor and remove unused code regularly.</li> <li>Always run lint and tests before pushing or merging.</li> </ul>"},{"location":"deployment-process/","title":"Deployment Process","text":""},{"location":"deployment-process/#frontend-deployment","title":"Frontend Deployment","text":"<ul> <li>Platform: Vercel</li> <li>Branch: Auto-deployment from <code>main</code></li> <li>Environment Variables: Managed securely via <code>.env</code> in Vercel dashboard</li> <li>Build &amp; Preview: Each push triggers preview builds for PRs and deploys on merge to <code>main</code></li> </ul>"},{"location":"deployment-process/#backend-deployment","title":"Backend Deployment","text":"<ul> <li>Platform: Django REST API deployed on Heroku</li> <li>Environment Variables: Configured in Heroku dashboard for security</li> <li>Scaling: Automatic scaling via Heroku dynos for increased demand</li> </ul>"},{"location":"deployment-process/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ul> <li>Tool: GitHub Actions</li> <li>Pre-Deployment: All codebases run tests, build, and lint checks before deploy</li> <li>Automation: Automatic deployment on merge to <code>main</code></li> <li>Status: Build and test status visible in PRs and repository dashboard</li> </ul>"},{"location":"developer-docs/","title":"Developer Docs","text":"<p>Comprehensive documentation for developers building, testing, and deploying this platform. Learn more about the architecture, workflows, best practices, and integration details.</p>"},{"location":"developer-docs/#system-architecture","title":"System Architecture","text":"<ul> <li>Frontend: Next.js + Tailwind CSS + TypeScript (deployed on Vercel)</li> <li>Backend: Python, Django REST Framework</li> <li>Database: PostgreSQL</li> <li>Integrations: Odoo ERP, Google Calendar API, AssemblyAI (transcriptions), Gemini (AI analytics)</li> <li>CI/CD: GitHub Actions, Vercel</li> <li>Backend Deployment: Heroku (Django app)</li> <li>Backend Logs: Heroku logs were checked regularly to collect error traces and debug production issues</li> </ul>"},{"location":"developer-docs/#database-schema","title":"Database Schema","text":""},{"location":"developer-docs/#env-usage-secrets-management","title":".env Usage &amp; Secrets Management","text":"<ul> <li>All sensitive values (API keys, secrets) are stored in <code>.env</code></li> <li>Never commit <code>.env</code> to source control; add it to <code>.gitignore</code></li> <li>Use environment variables for config overrides (dev, staging, production)</li> <li>For Django, load envs with <code>python-dotenv</code></li> <li>For Next.js, use <code>process.env.VAR_NAME</code></li> </ul>"},{"location":"developer-docs/#automated-testing","title":"Automated Testing","text":"<ul> <li>API endpoints tested with Postman &amp; Jest (frontend API calls)</li> <li>Unit tests: Every Django model, serializer, and view (<code>pytest</code>, <code>unittest</code>)</li> <li>Frontend tests: React components with <code>Jest</code> and <code>React Testing Library</code></li> <li>Integration tests: API endpoints, user flows (authentication, interview scheduling)</li> <li>Test coverage: Generated on CI, reports in PRs</li> <li>Commands:   ```bash   # Backend   python manage.py test   pytest --cov=backend</li> </ul> <p># Frontend   npm test   npm run coverage   ```</p>"},{"location":"developer-docs/#api-documentation","title":"API Documentation","text":"<ul> <li>Swagger UI: Available at <code>/api/swagger</code> in development</li> <li>Postman Collection: View Postman Documentation</li> </ul>"},{"location":"developer-docs/#coding-standards-quality","title":"Coding Standards &amp; Quality","text":"<ul> <li>Linting:</li> <li>Frontend: <code>eslint</code> (<code>npm run lint</code>)</li> <li>Backend: <code>black</code></li> <li>Formatting:</li> <li>Frontend: <code>prettier</code> (<code>npm run format</code>)</li> <li>Backend: <code>black</code></li> <li>Type Checking:</li> <li>Frontend: TypeScript (<code>tsc</code>)</li> <li>Backend: <code>mypy</code></li> <li>Style Guides: </li> <li>Next.js Best Practices</li> <li>Django REST Framework Style</li> </ul>"},{"location":"developer-docs/#branching-pr-workflow","title":"Branching &amp; PR Workflow","text":"<ul> <li>Branch types:</li> <li>Feature branches: <code>feature/xxx</code></li> <li>Bugfix branches: <code>bugfix/xxx</code></li> <li>PR reviews: Required for all merges to <code>main</code></li> <li>Descriptive PR titles &amp; linking issues (use <code>Fixes #issue_num</code>)</li> <li>Checklist for PRs:</li> <li>[x] All tests pass</li> <li>[x] Linting/formatting checks</li> </ul>"},{"location":"developer-docs/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>frontend/</code> \u2014 Next.js app (React components, pages, styles, API calls)</li> <li><code>backend/</code> \u2014 Django project (models, views, serializers, API)</li> <li><code>docs/</code> \u2014 Platform documentation, API reference, developer guides</li> <li><code>tests/</code> \u2014 Backend and frontend tests, fixtures, mocks</li> <li><code>scripts/</code> \u2014 Utility scripts for migration, data seeding, etc.</li> </ul>"},{"location":"developer-docs/#running-locally","title":"Running Locally","text":"<p>Setup Steps: 1. Clone repository <code>bash    git clone https://github.com/your-org/your-repo.git    cd your-repo</code> 2. Copy <code>.env.example</code> to <code>.env</code> and fill all secrets <code>bash    cp .env.example .env</code> 3. Install dependencies:    - Backend:      <code>bash      pip install -r backend/requirements.txt      python manage.py migrate</code>    - Frontend:      <code>bash      npm install</code> 4. Start servers:    - Backend:      <code>bash      python manage.py runserver</code>    - Frontend:      <code>bash      npm run dev</code> 5. Run tests:    - Backend:      <code>bash      python manage.py test</code>    - Frontend:      <code>bash      npm test</code> 6. Lint and format:    - Backend:      <code>bash      flake8 backend/      black backend/</code>    - Frontend:      <code>bash      npm run lint      npm run format</code></p>"},{"location":"developer-docs/#deployment","title":"Deployment","text":"<ul> <li>Frontend: Deploys automatically to Vercel from <code>main</code></li> <li>Backend: Deployed on Heroku. CI/CD pipeline via GitHub Actions.</li> <li>Production environment variables: Set up in Vercel (frontend) and in Heroku dashboard for backend</li> <li>Database migrations: <code>bash   python manage.py migrate</code></li> <li>Heroku Logs:   Regularly check logs using:   <code>bash   heroku logs --app recos</code>   This helps in collecting error traces and debugging production issues.</li> </ul>"},{"location":"developer-docs/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>Django Logging: Configured via <code>settings.py</code> </li> <li>Heroku Logging: Access with <code>heroku logs --tail</code></li> <li>Vercel Logging: Access via Vercel dashboard</li> </ul>"},{"location":"developer-docs/#integrations-reference","title":"Integrations Reference","text":"<ul> <li>Odoo: </li> <li>API details, authentication flow</li> <li>Example endpoint: <code>/api/connect-odoo</code></li> <li>Google Calendar: </li> <li>OAuth setup, event creation, calendar sync</li> <li>Endpoint: <code>/api/google-calendar</code></li> <li>AssemblyAI: </li> <li>Transcript API usage, webhook setup</li> <li>Gemini: </li> <li>AI analytics, interview reports</li> </ul>"},{"location":"developer-docs/#additional-utilities-scripts","title":"Additional Utilities &amp; Scripts","text":"<ul> <li>Database reset: <code>bash   python manage.py flush</code></li> <li>Create superuser: <code>python manage.py createsuperuser</code></li> <li>Frontend build: <code>npm run build</code></li> </ul>"},{"location":"features/","title":"Platform Features","text":"<p>Explore the core features of our platform, designed to streamline your recruitment and interview process with powerful integrations and AI-driven insights.</p>"},{"location":"features/#1-candidate-job-management","title":"1. Candidate &amp; Job Management","text":"<ul> <li>Fetch and Manage Jobs/Candidates:   Connect seamlessly with your Odoo instance to import jobs and candidates automatically, keeping your database up to date.</li> <li>Centralized Profile Management:   View, edit, and manage candidate profiles, job postings, and company information in one unified dashboard.</li> </ul>"},{"location":"features/#2-interview-scheduling","title":"2. Interview Scheduling","text":"<ul> <li>Google Meet Integration:   Effortlessly schedule interviews with auto-generated Google Meet links for virtual meetings.</li> <li>Calendar Sync:   Sync all interviews with your Google Calendar to avoid double bookings and keep organized.</li> <li>Automated Reminders:   Candidates and recruiters receive timely reminders for upcoming interviews.</li> </ul>"},{"location":"features/#3-ai-assisted-interviews","title":"3. AI-Assisted Interviews","text":"<ul> <li>Live Transcription (AssemblyAI):   Record and transcribe interviews in real-time for accurate assessment and note-taking.</li> <li>Gemini-Powered Interview Reports:   Get instant AI-driven analytics, summaries, and sentiment analysis for each interview.</li> </ul>"},{"location":"features/#4-reporting-insights","title":"4. Reporting &amp; Insights","text":"<ul> <li>Candidate Strengths &amp; Gaps:   Visualize candidate skills, strengths, and improvement areas based on interview and profile data.</li> <li>Ratings &amp; Recommendations:   Get automated ratings, feedback, and recommendations for candidate advancement.</li> <li>Export Reports:   Export interview and candidate analytics to PDF or Excel for sharing and record-keeping.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the platform! This section guides you through account creation, authentication, password reset flows, and connecting your Odoo account. Each step includes technical details and backend logic.</p>"},{"location":"getting-started/#1-sign-up","title":"1. Sign Up","text":"<p>To create a new account, fill out the following fields:</p> <ul> <li>First Name</li> <li>Last Name</li> <li>Email</li> <li>Password</li> </ul> <p>How it works: - The backend creates a new user record after validating the fields. - Passwords are securely hashed.</p> <pre>\nPOST   /api/signup\n</pre> <p>Sample Request (Frontend \u2192 Backend):</p> <pre>\n{\n  \"first_name\": \"Jacky\",\n  \"last_name\": \"Uwase\",\n  \"email\": \"jacky@gmail.com\",\n  \"password\": \"Kumany1@\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"message\": \"Account created successfully.\"\n}\n</pre> <p>Backend Logic:</p> <pre>\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.hashers import make_password\n\nclass SignUpView(APIView):\n    def post(self, request):\n        first_name = request.data.get('first_name')\n        last_name = request.data.get('last_name')\n        email = request.data.get('email')\n        password = request.data.get('password')\n        if not (first_name and last_name and email and password):\n            return Response({'error': 'All fields are required.'}, status=status.HTTP_400_BAD_REQUEST)\n        if User.objects.filter(email=email).exists():\n            return Response({'error': 'Email already exists.'}, status=status.HTTP_400_BAD_REQUEST)\n        user = User.objects.create(\n            first_name=first_name,\n            last_name=last_name,\n            email=email,\n            username=email,\n            password=make_password(password)\n        )\n        return Response({'message': 'Account created successfully.'}, status=status.HTTP_201_CREATED)\n</pre> <p></p>"},{"location":"getting-started/#2-login","title":"2. Login","text":"<p>If you already have an account, sign in using:</p> <ul> <li>Email</li> <li>Password</li> </ul> <pre>\nPOST   /api/login\n</pre> <p>Sample Request:</p> <pre>\n{\n  \"email\": \"jacky@gmail.com\",\n  \"password\": \"Kumany1@\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"token\": \"jwt-token\"\n}\n</pre> <p>Backend Logic:</p> <pre>\nfrom rest_framework_simplejwt.tokens import RefreshToken\n\nclass LoginView(APIView):\n    def post(self, request):\n        email = request.data.get('email')\n        password = request.data.get('password')\n        user = authenticate(username=email, password=password)\n        if user is not None:\n            refresh = RefreshToken.for_user(user)\n            return Response({'token': str(refresh.access_token)})\n        return Response({'error': 'Invalid credentials.'}, status=status.HTTP_401_UNAUTHORIZED)\n</pre> <p></p>"},{"location":"getting-started/#3-forgot-password-flow","title":"3. Forgot Password Flow","text":"<p>If you forget your password, follow these steps:</p>"},{"location":"getting-started/#a-initiate-password-reset","title":"a. Initiate Password Reset","text":"<ul> <li>Click \"Forgot Password?\" on the login page.</li> <li>Enter your registered email address.</li> </ul> <pre>\nPOST   /forgot-password/          # Start password reset\n</pre> <p>Sample Request:</p> <pre>\n{\n  \"email\": \"jacky@gmail.com\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"message\": \"Password reset code sent.\"\n}\n</pre> <p>Backend Logic:</p> <pre>\nclass ForgotPasswordView(APIView):\n    permission_classes = [permissions.AllowAny]\n\n    def post(self, request):\n        email = request.data.get('email', '').lower().strip()\n        if not email:\n            return Response({'error': 'Email is required'}, status=status.HTTP_400_BAD_REQUEST)\n\n        try:\n            user = Recruiter.objects.get(email=email)\n        except Recruiter.DoesNotExist:\n            return Response({'message': 'Password reset code sent if email exists in our system'}, status=status.HTTP_200_OK)\n\n        verification_code = ''.join(random.choices('0123456789', k=4))\n        cache.set(f'reset_code_{email}', verification_code, timeout=3*60)\n\n        subject = 'Password Reset Verification Code'\n        message = (\n            f\"Hello {user.first_name},\\n\\n\"\n            f\"We received a request to reset your password. Use the verification code below:\\n\\n\"\n            f\"{verification_code}\\n\\n\"\n            f\"This code will expire in 3 minutes.\\n\\n\"\n            f\"If you didn't request this, please ignore this email.\\n\\n\"\n            f\"Thank you,\\nThe Team\"\n        )\n\n        send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [user.email], fail_silently=False)\n        return Response({'message': 'Password reset code sent.'}, status=status.HTTP_200_OK)\n</pre> <p></p>"},{"location":"getting-started/#b-enter-verification-code","title":"b. Enter Verification Code","text":"<p>After receiving an email, enter the 4-digit code on the verification page.</p> <pre>\nPOST   /verify-reset-code/        # Verify reset code sent to email\n</pre> <p>Sample Request:</p> <pre>\n{\n  \"email\": \"jacky@gmail.com\",\n  \"code\": \"1234\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"detail\": \"Code verified, you may now reset your password.\"\n}\n</pre> <p>Backend Logic:</p> <pre>\nclass VerifyCodeView(APIView):\n    permission_classes = [permissions.AllowAny]\n\n    def post(self, request):\n        email = request.data.get('email', '').lower().strip()\n        code = str(request.data.get('code', '')).strip()\n        if not email or not code:\n            return Response({'detail': 'Email and code are required.'}, status=status.HTTP_400_BAD_REQUEST)\n\n        cached_code = cache.get(f'reset_code_{email}')\n        if cached_code is None:\n            return Response({\"detail\": \"Code has expired, please request a new one.\"}, status=status.HTTP_400_BAD_REQUEST)\n        if cached_code != code:\n            return Response({\"detail\": \"Invalid code.\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        request.session['reset_email'] = email\n        cache.delete(f'reset_code_{email}')\n        return Response({\"detail\": \"Code verified, you may now reset your password.\"})\n</pre> <p></p>"},{"location":"getting-started/#c-reset-password","title":"c. Reset Password","text":"<p>After code verification, set a new password (two fields: New Password, Confirm New Password).</p> <pre>\nPOST   /reset-password/           # Complete password reset\n</pre> <p>Sample Request:</p> <pre>\n{\n  \"email\": \"jacky@gmail.com\",\n  \"password\": \"NewStrong1@\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"detail\": \"Password reset successful.\"\n}\n</pre> <p>Backend Logic:</p> <pre>\nclass ResetPasswordView(APIView):\n    permission_classes = [AllowAny] \n\n    def post(self, request):\n        serializer = ResetPasswordSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.validated_data['email']\n        password = serializer.validated_data['password']\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:\n            return Response({\"detail\": \"User with this email does not exist.\"}, status=status.HTTP_400_BAD_REQUEST)\n        user.set_password(password)\n        user.save()\n        code_storage.pop(email, None)\n        return Response({\"detail\": \"Password reset successful.\"})\n</pre> <p></p>"},{"location":"getting-started/#4-connecting-to-odoo","title":"4. Connecting to Odoo","text":"<p>After logging in, connect your Odoo account using:</p> <ul> <li>Odoo Instance URL</li> <li>Email</li> <li>API Key / Password</li> </ul> <pre>\nPOST   /api/connect-odoo\n</pre> <p>Sample Request:</p> <pre>\n{\n  \"odoo_url\": \"https://your-odoo-instance.com\",\n  \"email\": \"odoo_user@example.com\",\n  \"api_key\": \"yourOdooApiKey\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"companies\": [\n    {\n      \"id\": 1,\n      \"name\": \"Acme Corp\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Innovate LLC\"\n    }\n  ]\n}\n</pre> <p>Backend Logic:</p> <pre>\nimport requests\n\nclass ConnectOdooView(APIView):\n    def post(self, request):\n        odoo_url = request.data.get('odoo_url')\n        email = request.data.get('email')\n        api_key = request.data.get('api_key')\n        if not (odoo_url and email and api_key):\n            return Response({'error': 'All fields are required.'}, status=status.HTTP_400_BAD_REQUEST)\n        # Example Odoo connection logic (pseudo)\n        response = requests.post(f\"{odoo_url}/api/auth\", data={\"email\": email, \"api_key\": api_key})\n        if response.status_code != 200:\n            return Response({'error': 'Odoo authentication failed.'}, status=status.HTTP_401_UNAUTHORIZED)\n        # Fetch companies\n        companies = requests.get(f\"{odoo_url}/api/companies\", headers={\"Authorization\": f\"Bearer {api_key}\"})\n        return Response({'companies': companies.json()}, status=status.HTTP_200_OK)\n</pre> <p></p>"},{"location":"getting-started/#5-company-selection","title":"5. Company Selection","text":"<p>After connecting, select a company from your Odoo account to start working.</p> <ul> <li>The dashboard lists companies fetched from Odoo.</li> <li>Choose one to work on.</li> <li>If you add a new company in Odoo, click \"Add Company\" to refresh and connect again.</li> </ul> <p></p>"},{"location":"integrations/","title":"Integrations","text":"<p>Detailed documentation for integrating with Odoo, Google Calendar/Meet, AssemblyAI, and Gemini. This guide covers setup, configuration, API usage, troubleshooting, and best practices.</p>"},{"location":"integrations/#odoo-integration","title":"Odoo Integration","text":"<p>Overview: Integrate your platform with Odoo to fetch jobs, candidates, and manage company data.</p> <p>Steps: 1. Odoo Setup    - Obtain your Odoo instance URL (e.g., <code>https://your-odoo-instance.com</code>)    - Generate an API key from your Odoo account (Settings \u2192 API Keys).    - Make sure your Odoo user has the necessary access rights for jobs, candidates, and companies.</p> <ol> <li>Connecting via API</li> <li>Store credentials securely in <code>.env</code>:      <code>ODOO_URL=https://your-odoo-instance.com      ODOO_EMAIL=your@email.com      ODOO_API_KEY=yourapikey</code></li> <li> <p>Use API endpoints to connect and fetch data.      ```python      import requests</p> <p>url = f\"{ODOO_URL}/api/jobs\"  headers = {\"Authorization\": f\"Bearer {ODOO_API_KEY}\"}  response = requests.get(url, headers=headers)  print(response.json())  ```</p> </li> <li> <p>Sample API Calls</p> </li> <li><code>GET /odoo/jobs</code> \u2013 Fetch all jobs from Odoo.</li> <li> <p><code>GET /odoo/candidates</code> \u2013 Fetch all candidates.</p> </li> <li> <p>Common Issues &amp; Solutions</p> </li> <li>401 Unauthorized: Double-check API key, user permissions.</li> <li>Connection Error: Ensure Odoo server is running and accessible.</li> <li> <p>Timeouts: Optimize endpoints, use pagination if available.</p> </li> <li> <p>Best Practices</p> </li> <li>Never log or expose API keys in error messages.</li> <li>Use environment variables for all sensitive data.</li> <li>Handle rate limiting and retries in your integration code.</li> </ol>"},{"location":"integrations/#google-calendar-google-meet-integration","title":"Google Calendar &amp; Google Meet Integration","text":"<p>Overview: Integrate Google Calendar to schedule interviews and auto-generate Google Meet links.</p> <p>Steps: 1. Create Google Cloud Project    - Go to Google Cloud Console.    - Create a new project (e.g., \u201cRecruitment Platform\u201d).</p> <ol> <li>Enable APIs</li> <li> <p>In the project, enable:</p> <ul> <li>Google Calendar API</li> <li>Google People API (if you want to fetch attendee profiles)</li> <li>Google Meet integration comes with Calendar events</li> </ul> </li> <li> <p>Create OAuth 2.0 Client Credentials</p> </li> <li>Go to \u201cAPIs &amp; Services\u201d \u2192 \u201cCredentials\u201d.</li> <li>Click Create Credentials \u2192 OAuth Client ID.</li> <li>Choose Web application and add your redirect URI (e.g., <code>https://your-domain.com/api/auth/google/callback/</code>).</li> <li>Download the <code>credentials.json</code> file and keep it secure.</li> <li> <p>Store client ID and secret in <code>.env</code>.</p> </li> <li> <p>OAuth Flow Implementation</p> </li> <li>On the backend (Python/Django), use libraries like <code>google-auth</code>, <code>google-api-python-client</code>.</li> <li>Redirect users to Google OAuth consent screen.</li> <li>After success, handle the callback, exchange the code for tokens, and store refresh tokens securely.</li> </ol> <p>```python    from google_auth_oauthlib.flow import Flow</p> <p>flow = Flow.from_client_secrets_file(        'credentials.json',        scopes=['https://www.googleapis.com/auth/calendar'],        redirect_uri='https://your-domain.com/api/auth/google/callback/'    )    authorization_url, state = flow.authorization_url(access_type='offline', prompt='consent')    ```</p> <ol> <li>Creating Calendar Events &amp; Meet Links</li> <li> <p>Use the Google Calendar API to create events with <code>conferenceData</code> for Meet links:      <code>python      event = {          'summary': 'Interview',          'start': {'dateTime': '2025-10-02T10:00:00-07:00', 'timeZone': 'America/Los_Angeles'},          'end': {'dateTime': '2025-10-02T11:00:00-07:00', 'timeZone': 'America/Los_Angeles'},          'attendees': [{'email': 'candidate@example.com'}],          'conferenceData': {              'createRequest': {'requestId': 'sample123'}          }      }      created_event = calendar_service.events().insert(          calendarId='primary',          body=event,          conferenceDataVersion=1      ).execute()      meet_link = created_event['hangoutLink']</code></p> </li> <li> <p>Sample API Calls</p> </li> <li><code>POST /calendar/events</code> \u2013 Create interview event and Meet link.</li> <li> <p><code>GET /calendar/meets</code> \u2013 List all Meet links.</p> </li> <li> <p>Common Issues &amp; Solutions</p> </li> <li>Redirect URI mismatch: Make sure the URI in Google Console matches your app\u2019s callback.</li> <li>Missing conferenceData: Pass <code>conferenceDataVersion=1</code> when creating events.</li> <li>Token expired: Implement token refresh logic.</li> <li> <p>Invalid credentials: Check your <code>credentials.json</code> file and <code>.env</code> settings.</p> </li> <li> <p>Security &amp; Best Practices</p> </li> <li>Never expose <code>credentials.json</code> publicly.</li> <li>Store tokens encrypted.</li> <li> <p>Use HTTPS for all OAuth flows.</p> </li> <li> <p>Error Handling</p> </li> <li>Log errors and monitor via Sentry or your logging system.</li> <li>Always handle exceptions for network/API calls.</li> </ol>"},{"location":"integrations/#assemblyai-integration","title":"AssemblyAI Integration","text":"<p>Overview: Use AssemblyAI to transcribe interviews in real-time and provide transcripts for later processing.</p> <p>Steps: 1. Sign Up and Get API Key    - Register at AssemblyAI and create an account.    - Find your API key in your dashboard.</p> <ol> <li>Store API Key</li> <li> <p>Store your API key in <code>.env</code>:      <code>ASSEMBLYAI_API_KEY=your_api_key</code></p> </li> <li> <p>Upload Audio &amp; Start Transcription</p> </li> <li> <p>Send audio file to AssemblyAI and start transcription:      ```python      import requests</p> <p>headers = {'authorization': ASSEMBLYAI_API_KEY}  response = requests.post('https://api.assemblyai.com/v2/upload', files={'file': open('audio.mp3', 'rb')}, headers=headers)  audio_url = response.json()['upload_url']</p> <p>transcript_response = requests.post(      'https://api.assemblyai.com/v2/transcript',      json={'audio_url': audio_url},      headers=headers  )  transcript_id = transcript_response.json()['id']  ```</p> </li> <li> <p>Get Transcription Results</p> </li> <li> <p>Poll the API until transcription is complete:      <code>python      import time      while True:          res = requests.get(f'https://api.assemblyai.com/v2/transcript/{transcript_id}', headers=headers)          status = res.json()['status']          if status == 'completed': break          elif status == 'failed': raise Exception('Transcription failed')          time.sleep(5)      transcript_text = res.json()['text']</code></p> </li> <li> <p>Common Issues &amp; Solutions</p> </li> <li>Large files: Use chunked upload if audio is &gt;100MB.</li> <li>API limits: Monitor usage and handle rate limiting.</li> <li> <p>Audio format errors: Use standard formats (mp3, wav).</p> </li> <li> <p>Security &amp; Best Practices</p> </li> <li>Never expose your API key.</li> <li>Delete audio files after processing if not needed.</li> </ol>"},{"location":"integrations/#gemini-integration-ai-reports","title":"Gemini Integration (AI Reports)","text":"<p>Overview: Use Gemini (Google AI) to analyze interviews, extract sentiments, and generate candidate ratings and recommendations.</p> <p>Steps: 1. Gemini API Access    - Sign up for Gemini or Google AI platform and enable the Gemini API.    - Obtain an API key and set usage quotas.</p> <ol> <li>Store API Key</li> <li> <p>Add your Gemini API key to <code>.env</code>:      <code>GEMINI_API_KEY=your_api_key</code></p> </li> <li> <p>Send Data for AI Analysis</p> </li> <li>Format interview transcription and candidate data.</li> <li> <p>Send to Gemini API for report generation:      ```python      import requests</p> <p>headers = {\"Authorization\": f\"Bearer {GEMINI_API_KEY}\"}  data = {\"interview_text\": transcript_text, \"candidate_profile\": {...}}  response = requests.post(\"https://gemini.googleapis.com/v1/analyze\", json=data, headers=headers)  report = response.json()  ```</p> </li> <li> <p>Handle Response</p> </li> <li>Parse AI report, extract recommendations, strengths, gaps, and scores.</li> <li> <p>Store and display in your dashboard.</p> </li> <li> <p>Common Issues &amp; Solutions</p> </li> <li>API errors: Validate data format and authentication.</li> <li>Quota exceeded: Monitor usage and request more quota if needed.</li> <li> <p>Latency: Gemini AI reports may take several seconds; show loading indicator.</p> </li> <li> <p>Security &amp; Best Practices</p> </li> <li>Never expose your Gemini API key.</li> <li>Validate and sanitize all data sent to AI APIs.</li> </ol>"},{"location":"integrations/#general-troubleshooting-best-practices","title":"General Troubleshooting &amp; Best Practices","text":"<ul> <li>Always use <code>.env</code> for sensitive credentials and never commit them.</li> <li>Use HTTPS for all API and OAuth flows.</li> <li>Monitor logs (Django, Vercel, Heroku, Sentry) for errors and usage spikes.</li> <li>Handle errors gracefully and inform users of next steps.</li> <li>Keep all API libraries up to date for security and compatibility.</li> <li>Regularly test integrations with sandbox/test accounts before deploying to production.</li> </ul>"},{"location":"integrations/#references-further-reading","title":"References &amp; Further Reading","text":"<ul> <li>Odoo API Docs</li> <li>Google Calendar API Quickstart</li> <li>Google OAuth Docs</li> <li>AssemblyAI API Docs</li> <li>Gemini (Google AI) Docs</li> </ul>"},{"location":"qa-process/","title":"Q/A Process","text":""},{"location":"qa-process/#testing","title":"Testing","text":"<ul> <li>Unit Tests: All backend logic covered with Django REST unit tests.</li> <li>Frontend: UI tested with manual and automated checks.</li> <li>API: All endpoints tested with Postman.</li> </ul>"},{"location":"qa-process/#code-review","title":"Code Review","text":"<ul> <li>All PRs reviewed on GitHub.</li> <li>Pre-merge checks for lint, tests, and build.</li> </ul>"},{"location":"qa-process/#test-coverage","title":"Test Coverage","text":"<ul> <li>Automated reports generated for backend code.</li> <li>Manual verification for integration flows.</li> </ul>"},{"location":"qa-process/#live-api-docs","title":"Live API Docs","text":"<ul> <li>Postman Online Docs: View Postman Documentation</li> </ul>"}]}